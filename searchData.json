[{"title":"Python_Day1_人人都爱列表","url":"/2019/08/07/Python_Day1_人人都爱列表/","content":"\n**列表由一系列按特定顺序排列的元素组成。你可以创建包含字母表中所有字母、数字0~9或 所有家庭成员姓名的列表;也可以将任何东西加入列表中，其中的元素之间可以没有任何关系。 鉴于列表通常包含多个元素，给列表指定一个表示复数的名称(如names)是个不错的主意。**\n\n**列表非常适合利用顺序和位置定位某一元素，尤其是当元素的顺序或内容经常发生改变时。与字符串不同，列表是可变的。你可以直接对原始列表进行修改:添加新元素、删除 或覆盖已有元素。在列表中，具有相同值的元素允许出现多次。**\n\n## 列表的作用：\n\n多个装备，多个爱好，多门课程，多个女朋友……\n\n## 如何定义一个列表：\n\nname = []#这样就定义了一个列表 \n\n## 列表是用来干嘛的\n\n用来存储数据\n```python\nlist = ['wang','zhang','li'] \nprint(type(list)) \n```\n\n\n![img](E:/python/%E7%AC%94%E8%AE%B0%E5%8C%BA/m15631196139@163.com/78af3b2c789e471294655c9c36fe18e0/clipboard.png)\n\n## python列表的循环遍历：\n\n```python\nfor name in list:     \n    print(name) \n```\n\n![img](E:/python/%E7%AC%94%E8%AE%B0%E5%8C%BA/m15631196139@163.com/2be781673c1c4abda785ff8d19a1e12f/clipboard.png)\n\n### 1.1常用列表方法\n```python\n#使用 dir(list) ，查看列表的内置方法： \n>>> dir(list) \n['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort'] \n```\n#### 1.1.1 append\n```python\n#向列表末尾追加一个元素\n>>> numbers = [1,2,2,3,3,3]\n>>> numbers.append(4)\n>>> numbers\n[1, 2, 2, 3, 3, 3, 4]\n```\n#### 1.1.2 clear\n```python\n#清除一个列表中的所有元素\n>>> n\n[1, 2, 3, 4, 5]\n\n>>> n.clear()\n\n>>> n\n[]\n```\n\n\n#### 1.1.3 copy\n```python\n#复制一个列表\n>>> n = [1,2,3,4,5]\n\n>>> n.copy()\n[1, 2, 3, 4, 5]\n\n>>> n.copy()\n[1, 2, 3, 4, 5]\n\n>>> num = n.copy()\n\n>>> num\n[1, 2, 3, 4, 5]\n```\n\n\n#### 1.1.4 count\n```python\n#计算某个元素在列表中出现的次数\n>>> numbers\n[1, 2, 2, 3, 3, 3, 4]\n>>> numbers.count(1)\n1\n>>> numbers.count(2)\n2\n>>> numbers.count(3)\n3\n>>> numbers.count(4)\n1\n```\n\n\n#### 1.1.5 extend\n```python\n#直接向列表末尾一次性追加另一个列表\n>>> numbers\n[1, 2, 2, 3, 3, 3, 4]\n>>> a = [4,4,4]\n>>> numbers.extend(a)\n>>> numbers\n[1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\n>>> a\n[4, 4, 4]\n```\n\n\n#### 1.1.6 insert\n```python\n#将对象插入列表中\n>>> numbers\n[1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\n>>> numbers.insert(0,0)\n>>> numbers\n[0, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\n```\n\n\n#### 1.1.7 pop\n```python\n#移除列表中的最后一个元素，默认是最后一个\n>>> numbers\n[0, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\n>>> numbers.pop()\n4\n>>> numbers\n[0, 1, 2, 2, 3, 3, 3, 4, 4, 4]\n```\n\n\n####  1.1.8 remove\n```python\n#默认移除列表中第一个匹配的元素\n>>> num\n[1, 2, 1, 3, 2]\n>>> num.remove(1)\n>>> num\n[2, 1, 3, 2]\n>>> num.remove(2)\n>>> num\n[1, 3, 2]\n```\n\n\n####  1.1.9reverse\n```python\n#将列表中的元素反向存放\n>>> numbers\n[0, 1, 2, 2, 3, 3, 3, 4, 4, 4]\n>>> numbers.reverse()\n>>> numbers\n[4, 4, 4, 3, 3, 3, 2, 2, 1, 0]\n```\n\n\n#### 1.1.10 sort\n```python\n#########################################################\n#对列表排序，这个我比较喜欢，里面挺多好玩的东西，下面做个简单的介绍#\n#########################################################\n#默认排序\n>>> L = [1,4,3,2]\n>>> L.sort()\n>>> L\n[1, 2, 3, 4]\n\n#自定义排序\n#咱们先看看sort的使用方法\n>>> L.sort.__doc__\n'L.sort(key=None, reverse=False) -> None -- stable sort *IN PLACE*'\n\n#根据提供的key函数为元素产生一个键，列表的元素按照这个键值来排序\n>>> x = ['abc','a','bc','abcd']\n>>> x.sort(key=len)\n>>> x\n['a', 'bc', 'abc', 'abcd’]\n\n#反向排序\n>>> n = [3, 1, 2, 5]\n>>> n.sort(reverse=True)\n>>> n\n[5, 3, 2, 1]\n```\n\n\n### 1.2 其他的几个方法\n\n#### 1.2.1 in\n```python\n#使用 in 判断值是否存在\n#判断一个值是否存在于给定的列表中的许多方式，其中最具有 Python 风格的是使用 in：\n>>> num = [1, 2, 3]\n>>> 1 in num\nTrue\n>>> 5 in num\nFalse\n>>>\n\n#同一个值可能出现在列表的多个位置，但只要至少出现一次，in就会返回Ture\n>>> num = [1, 1, 2, 3]\n>>> 1 in num\nTrue\n```\n\n\n#### 1.2.2 len（）\n```python\n#使用 len（）获取长度\n#len（）可以返回列表长度\n>>> num = [1, 2, 3]\n>>> len(num)\n3\n\n#对于汉字呢？是如何计算长度呢？\n>>> num = \"菜鹌鹑2333\"\n>>> len(num)\n7\n#so，你get到了吗？\n```\n\n\n### 1.2.3  “=” 和 “copy（）”有啥不一样呢？\n\n**“=” 是赋值  copy（）是复制**\n\n```python\n#这个相信大家都知道，但是到底还有啥区别呢？往下看\n>>> a = [1, 2, 3]\n>>> a\n[1, 2, 3]\n>>> b = a\n>>> b\n[1, 2, 3]\n>>> a[0] = '菜鹌鹑'\n>>> a\n['菜鹌鹑', 2, 3]\n>>> b\n['菜鹌鹑', 2, 3]\n#和软链接有点像哦，让我们看看他们的内存地址：\n>>> hex(id(a))\n'0x1a93262c588'\n>>>\n>>> hex(id(b))\n'0x1a93262c588'\n#我们发现，两个变量指向同一个对象。\n\n#咱们再看看copy（）\n>>> c = a.copy()\n>>> a\n[1, 2, 3]\n>>> c\n[1, 2, 3]\n>>> a[0] = '菜鹌鹑'\n>>> c\n[1, 2, 3]\n#没办法改变c列表了，再看看他们的内存地址\n>>> hex(id(a))\n'0x1a93262c588'\n>>> hex(id(c))\n'0x1a93262ce08'\n#原来copy（）生成了新的列表，已经指向两个不同的对象。\n\n#除了copy（），还有其他方法生成新列表\n########\n#list()#\n########\n>>> a = [1,2,3]\n>>> b = list(a)\n>>> b\n[1, 2, 3]\n>>> hex(id(a))\n'0x2e78957c588'\n>>> hex(id(b))\n'0x2e78957cfc8'\n#########\n#列表切片#\n#########\n>>> a = [1,2,3]\n>>> c = a[:]\n>>> c\n[1, 2, 3]\n>>> hex(id(c))\n'0x2e78957c588'\n>>> hex(id(a))\n'0x2e78957ce08'\n```"},{"title":"Hello World","url":"/2019/08/07/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n"}]